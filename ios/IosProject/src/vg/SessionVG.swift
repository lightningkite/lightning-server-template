// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation
import XmlToXibRuntime

public final class SessionVG : ViewGenerator {
    public unowned var root: ValueSubject<Array<ViewGenerator>>
    public var session: Session
    public init(root: ValueSubject<Array<ViewGenerator>>, session: Session) {
        self.root = root
        self.session = session
        self.sessionStack = ValueSubject([])
        //Necessary properties should be initialized now
        self.homeTabClick()
    }
    
    
    //--- Properties
    
    public let sessionStack: ValueSubject<Array<ViewGenerator>>
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        
        let xml = SessionBinding()
        
        //--- helpers
        let showBackButton = self.sessionStack.map { (it) -> Bool in it.count > 1 }
        Notifications.INSTANCE.configure(dependency: dependency)
        if let userSession = (self.session.user) {
            Notifications.INSTANCE.notificationToken.flatMap({ (it) -> Single<Void> in (it).map { (it) in
                return userSession.auth.getSelf().flatMap { (user) -> Single<FcmToken> in userSession.fcmToken.upsert(id: it, input: FcmToken(_id: it, user: user._id)) }.map { (it) -> Void in () }
            } ?? Single.just(()) }).subscribe(onError: { (it) -> Void in it.printStackTrace() })
        }
        
        //--- Set Up xml.titleBar (overwritten on flow generation)
        
        //--- Set Up xml.backButton (overwritten on flow generation)
        xml.backButton.onClick { () -> Void in self.backButtonClick() }
        
        //--- Set Up xml.logo
        
        //--- Set Up xml.title
        self.sessionStack.map { (it) -> String in (it.last as? HasTitle)?.title ?? R.string.app_name }.subscribeAutoDispose(xml.title, \UILabel.text)
        
        self.sessionStack.subscribeAutoDispose(xml.backButton, { (this, it) -> Void in this.isEnabled = it.count > 1 })
        
        //--- Set Up xml.settings
        showBackButton.subscribeAutoDispose(xml.backButton, (\UIButton.visible))
        showBackButton.subscribeAutoDispose(xml.backButton, \UIControl.isEnabled)
        
        //--- Set Up xml.session (overwritten on flow generation)
        self.sessionStack.showIn(xml.session, dependency: dependency)
        
        //--- Set Up xml.homeTab
        self.sessionStack.map { (it) -> Bool in it.first! is HomeVG }
            .withWrite { (it) -> Void in if it { self.homeTabClick() } }
            .bind(xml.homeTab)
        
        //--- Set Up xml.settingsTab
        self.sessionStack.map { (it) -> Bool in it.first! is SettingsVG }
            .withWrite { (it) -> Void in if it { self.settingsTabClick() } }
            .bind(xml.settingsTab)
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root
    }
    
    
    
    //--- Actions
    
    public func backButtonClick() -> Void {
        self.sessionStack.backPressPop()
    }
    
    public func homeTabClick() -> Void {
        self.sessionStack.reset(HomeVG())
    }
    
    public func settingsTabClick() -> Void {
        self.sessionStack.reset(SettingsVG(root: self.root, session: self.session))
    }
    
    
    //--- Body End
}

