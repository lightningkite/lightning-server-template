// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import LightningServer
import RxSwiftPlus
import Foundation

public final class LogInVG : ViewGenerator {
    public unowned var root: ValueSubject<Array<ViewGenerator>>
    public unowned var stack: ValueSubject<Array<ViewGenerator>>
    public init(root: ValueSubject<Array<ViewGenerator>>, stack: ValueSubject<Array<ViewGenerator>>) {
        self.root = root
        self.stack = stack
        self.selectedServer = ValueSubject(0)
        //Necessary properties should be initialized now
    }
    
    
    public let selectedServer: ValueSubject<Int>
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        
        let xml = LogInBinding()
        
        //--- Set Up xml.email (overwritten on flow generation)
        xml.email.onClick { () -> Void in self.emailClick() }
        
        //--- Set Up xml.google
        xml.google.onClick { () -> Void in self.googleClick(dependency: dependency) }
        
        //--- Set Up xml.apple
        xml.apple.onClick { () -> Void in self.appleClick(dependency: dependency) }
        
        //--- Set Up xml.github
        xml.github.onClick { () -> Void in self.githubClick(dependency: dependency) }
        
        //--- Set Up xml.selectedServer
        self.selectedServer.map { (it) -> String in ServerOptions.INSTANCE.availableServers[it].name }.subscribeAutoDispose(xml.selectedServer, \UILabel.text)
        xml.selectedServer.onLongClick { () -> Void in
            var temp = self.selectedServer.value + 1
            if temp >= ServerOptions.INSTANCE.availableServers.count { temp = 0 }
            self.selectedServer.value = temp
        }
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root
    }
    
    
    
    //--- Actions
    
    public func emailClick() -> Void {
        self.stack.push(LogInEmailVG(root: self.root, server: ServerOptions.INSTANCE.availableServers[self.selectedServer.value]))
    }
    
    //--- Action submitEmailClick
    
    public func googleClick(dependency: ViewControllerAccess) -> Void {
        dependency.openUrl(url: ServerOptions.INSTANCE.availableServers[self.selectedServer.value].api.httpUrl + "/auth/oauth/google/login")
    }
    
    public func appleClick(dependency: ViewControllerAccess) -> Void {
        dependency.openUrl(url: ServerOptions.INSTANCE.availableServers[self.selectedServer.value].api.httpUrl + "/auth/oauth/apple/login")
    }
    
    public func githubClick(dependency: ViewControllerAccess) -> Void {
        dependency.openUrl(url: ServerOptions.INSTANCE.availableServers[self.selectedServer.value].api.httpUrl + "/auth/oauth/github/login")
    }
    
    
    //--- Action submitClick
    
    
    //--- Body End
}

