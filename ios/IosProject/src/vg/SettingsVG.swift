// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation
import XmlToXibRuntime

public final class SettingsVG : ViewGenerator, HasTitle {
    public unowned var root: ValueSubject<Array<ViewGenerator>>
    public var session: Session
    public init(root: ValueSubject<Array<ViewGenerator>>, session: Session) {
        self.root = root
        self.session = session
        self.working = ValueSubject(false)
        //Necessary properties should be initialized now
    }
    
    
    public let working: ValueSubject<Bool>
    
    public var title: String {
        get { return R.string.settings }
    }
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        
        let xml = SettingsBinding()
        
        //--- Set Up xml.welcomeEmail
        let user: Single<User?> = run { () -> Single<User?> in
            if self.session.user != nil {
                return self.session.user!.auth.getSelf().working(self.working).map { (it) -> User? in it }.doOnError { (it) -> Void in it.printStackTrace() }.catchError { _ in Single.just(nil) }.cache()
            } else {
                return Single.just(nil)
            }
        }
        
        user.map { (it) -> String in (it?.email).map { (it) in
            return R.string.user_email.formatList(arguments: [it])
        } ?? R.string.anon_account }.subscribeAutoDispose(xml.welcomeEmail, \UILabel.text)
        
        //--- Set Up xml.loadWorking
        self.working.subscribeAutoDispose(xml.loadWorking, \UIView.showLoading)
        
        //--- Set Up xml.subscriptionLink
        user.toObservable().map { (it) -> Bool in (it != nil) && it?.subscriptionId == nil }.subscribeAutoDispose(xml.subscriptionLink, (\UIView.exists))
        xml.subscriptionLink.onClick { () -> Void in dependency.openUrl(url: "\(String(kotlin: (self.session.api as? LiveApi)?.httpUrl ?? "invalid"))/payment?jwt=\(String(kotlin: self.session.userToken))") }
        
        //--- Set Up xml.manageSubscription
        user.toObservable().map { (it) -> Bool in it?.subscriptionId != nil }.subscribeAutoDispose(xml.manageSubscription, (\UIView.exists))
        xml.manageSubscription.onClick { () -> Void in dependency.openUrl(url: "\(String(kotlin: (self.session.api as? LiveApi)?.httpUrl ?? "invalid"))/payment/portal?jwt=\(String(kotlin: self.session.userToken))") }
        
        //--- Set Up xml.logout
        xml.logout.onClick { () -> Void in self.logoutClick() }
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root
    }
    
    
    
    //--- Actions
    
    public func logoutClick() -> Void {
        RootVG.Companion.INSTANCE.instance.logOut(self.session)
    }
    
    
    //--- Body End
}

