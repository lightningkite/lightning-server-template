// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation
import XmlToXibRuntime

public final class AppExplanationVG : ViewGenerator {
    public unowned var root: ValueSubject<Array<ViewGenerator>>
    public unowned var stack: ValueSubject<Array<ViewGenerator>>
    public init(root: ValueSubject<Array<ViewGenerator>>, stack: ValueSubject<Array<ViewGenerator>>) {
        self.root = root
        self.stack = stack
        self.showIndex = ValueSubject(0)
        //Necessary properties should be initialized now
        self.explanations = [Explanation(title: "Welcome!", image: ImageLayer(R.drawable.logo), content: "Welcome to Lightning Template!  Some features:"), Explanation(title: "Notifications", image: ImageLayer(R.drawable.ic_circle_notifications), content: "Notifications on Android, iOS, and Web are all built in.  You just need to plug in your credentials!"), Explanation(title: "Stripe", image: ImageLayer(R.drawable.ic_payment), content: "Stripe subscriptions are a built-in feature for you to monetize your app!"), Explanation(title: "Join Us!", image: ImageLayer(R.drawable.logo), content: "We'd love for you to work with our tools!", buttonTitle: "Check it out!") { () -> Void in self.stack.reset(SessionVG(root: self.root, session: Session(anon: AnonymousSession(ServerOptions.INSTANCE.availableServers.first!.api), user: nil))) }]
    }
    
    
    public let showIndex: ValueSubject<Int>
    public final class Explanation {
        public var title: String
        public var image: Image
        public var content: String
        public var buttonTitle: String?
        public var button: () -> Void
        public init(title: String, image: Image, content: String, buttonTitle: String? = nil, button: @escaping () -> Void = { () -> Void in  }) {
            self.title = title
            self.image = image
            self.content = content
            self.buttonTitle = buttonTitle
            self.button = button
            //Necessary properties should be initialized now
        }
    }
    public var explanations: (Array<AppExplanationVG.Explanation>)!
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        
        let xml = AppExplanationBinding()
        
        //--- Set Up xml.explanation
        Observable.just(self.explanations)
            .showIn(xml.explanation, showIndex: self.showIndex, makeView: { (obs) -> UIView in
            //--- Make Subview For xml.explanation (overwritten on flow generation)
            let cellXml = ComponentAppExplanationBinding()
            
            //--- Set Up cellXml.image
            obs.map { (it) -> Image in it.image }.subscribeAutoDispose(cellXml.image, UIImageView.setImage)
            
            //--- Set Up cellXml.title
            obs.map { (it) -> String in it.title }.subscribeAutoDispose(cellXml.title, \UILabel.text)
            
            //--- Set Up cellXml.content
            obs.map { (it) -> String in it.content }.subscribeAutoDispose(cellXml.content, \UILabel.text)
            
            //--- Set Up cellXml.button
            obs.map { (it) -> Bool in it.buttonTitle != nil }.subscribeAutoDispose(cellXml.button, (\UIView.exists))
            obs.map { (it) -> String in it.buttonTitle ?? "" }.subscribeAutoDispose(cellXml.button, UIButton.setTitle)
            cellXml.button.rx.click.flatMap({ (it) -> Single<AppExplanationVG.Explanation> in obs.firstOrError() }).subscribeAutoDispose(cellXml.root, { (this, it) -> Void in it.button() })
            
            //--- End Make Subview For xml.explanation (overwritten on flow generation)
            return cellXml.root
        })
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root
    }
    
    
    
    //--- Actions
    
    public func cellXmlButtonClick() -> Void {
    }
    
    
    //--- Body End
}

