// Package: com.lightningkite.template.api
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import Foundation

public final class ServerOption {
    public var name: String
    public var api: LiveApi
    public init(name: String, api: LiveApi) {
        self.name = name
        self.api = api
        //Necessary properties should be initialized now
    }
}

public final class ServerOptions {
    public init() {
        let staging: ServerOption = ServerOption(name: "Staging", api: LiveApi(httpUrl: "https://templateapi.cs.lightningkite.com", socketUrl: "wss://ws.templateapi.cs.lightningkite.com"))
        self.staging = staging
        let jivie: ServerOption = ServerOption(name: "Jivie", api: LiveApi(httpUrl: "https://jivie.lightningkite.com", socketUrl: "wss://jivie.lightningkite.com"))
        self.jivie = jivie
        //Necessary properties should be initialized now
        self.availableServers = [self.staging, self.jivie]
    }
    public static let INSTANCE = ServerOptions()
    
    public let staging: ServerOption
    public let jivie: ServerOption
    
    public var availableServers: (Array<ServerOption>)!
    
    public func getOptionByName(name: String) -> ServerOption? {
        return self.availableServers.first(where: { (it) -> Bool in it.name == name });
    }
    
    public func getIndexByName(name: String) -> Int? {
        let index = (self.availableServers.firstIndex(where: { (it) -> Bool in it.name == name }) ?? -1)
        return index >= 0 ? index : nil
    }
}
