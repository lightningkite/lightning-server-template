// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import { LogInBinding } from '../../resources/layouts/LogInBinding'
import { ServerOptions } from '../api/ServerOptions'
import { LogInEmailVG } from './LogInEmailVG'
import { ViewGenerator, ViewGeneratorStack, onThrottledEventDo, subscribeAutoDispose, xStackPush } from '@lightningkite/rxjs-plus'
import { BehaviorSubject } from 'rxjs'
import { map } from 'rxjs/operators'

//! Declares com.lightningkite.template.vg.LogInVG
export class LogInVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor(public readonly root: ViewGeneratorStack, public readonly stack: ViewGeneratorStack) {
        this.selectedServer = new BehaviorSubject(0);
    }
    
    
    public readonly selectedServer: BehaviorSubject<number>;
    
    public generate(dependency: Window): HTMLElement {
        
        const xml = LogInBinding.inflate();
        
        //--- Set Up xml.email (overwritten on flow generation)
        onThrottledEventDo(xml.email, 'click', (): void => {
            this.emailClick();
        });
        
        //--- Set Up xml.google
        onThrottledEventDo(xml.google, 'click', (): void => {
            this.googleClick(dependency);
        });
        
        //--- Set Up xml.apple
        onThrottledEventDo(xml.apple, 'click', (): void => {
            this.appleClick(dependency);
        });
        
        //--- Set Up xml.github
        onThrottledEventDo(xml.github, 'click', (): void => {
            this.githubClick(dependency);
        });
        
        //--- Set Up xml.selectedServer
        this.selectedServer.pipe(map((it: number): string => (ServerOptions.INSTANCE.availableServers[it].name))).pipe(subscribeAutoDispose(xml.selectedServer, "innerText"));
        onThrottledEventDo(xml.selectedServer, 'contextmenu', (): void => {
            let temp = this.selectedServer.value + 1;
            if (temp >= ServerOptions.INSTANCE.availableServers.length) { temp = 0 }
            this.selectedServer.next(temp);
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root;
    }
    
    
    
    //--- Actions
    
    public emailClick(): void {
        xStackPush(this.stack, new LogInEmailVG(this.root, ServerOptions.INSTANCE.availableServers[this.selectedServer.value]));
    }
    
    //--- Action submitEmailClick
    
    public googleClick(dependency: Window): void {
        window.open(ServerOptions.INSTANCE.availableServers[this.selectedServer.value].api.httpUrl + "/auth/oauth/google/login", "_blank");
    }
    
    public appleClick(dependency: Window): void {
        window.open(ServerOptions.INSTANCE.availableServers[this.selectedServer.value].api.httpUrl + "/auth/oauth/apple/login", "_blank");
    }
    
    public githubClick(dependency: Window): void {
        window.open(ServerOptions.INSTANCE.availableServers[this.selectedServer.value].api.httpUrl + "/auth/oauth/github/login", "_blank");
    }
    
    
    //--- Action submitClick
    
    
    //--- Body End
}
