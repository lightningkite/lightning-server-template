// Package: com.lightningkite.template.vg
// Generated by Khrysalis - this file will be overwritten.
import { Strings } from '../../resources/R'
import { SessionBinding } from '../../resources/layouts/SessionBinding'
import { FcmToken, User } from '../../shared/models'
import { Session } from '../models/UserSession'
import { HasTitle } from './HasTitle'
import { SettingsVG } from './SettingsVG'
import { ImageButton } from '@lightningkite/android-xml-runtime'
import { printStackTrace, runOrNull, tryCastInterface } from '@lightningkite/khrysalis-runtime'
import { ViewGenerator, ViewGeneratorStack, chain, not, onThrottledEventDo, reverse, showInSwapCustom, subscribeAutoDispose, viewVisible, xStackBackPressPop, xStackReset } from '@lightningkite/rxjs-plus'
import { Notifications } from '@lightningkite/rxjs-plus/fcm'
import { first, takeLastOr } from 'iter-tools-es'
import { BehaviorSubject, Observable, of } from 'rxjs'
import { map, mergeMap, switchMap } from 'rxjs/operators'

//! Declares com.lightningkite.template.vg.SessionVG
export class SessionVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor(public readonly root: ViewGeneratorStack, public readonly session: Session) {
        this.sessionStack = new BehaviorSubject([]);
        this.mainTabClick();
    }
    
    
    //--- Properties
    
    public readonly sessionStack: ViewGeneratorStack;
    
    public generate(dependency: Window): HTMLElement {
        
        const xml = SessionBinding.inflate();
        
        //--- helpers
        const showBackButton = this.sessionStack.pipe(map((it: Array<ViewGenerator>): boolean => (it.length > 1)));
        Notifications.INSTANCE.configure(dependency);
        const userSession_4 = this.session.user;
        if (userSession_4 !== null) {
            Notifications.INSTANCE.notificationToken.pipe(switchMap((it: (string | null)): Observable<any> => (((): (Observable<FcmToken> | null) => {
                if (it === null || it === undefined) { return null }
                return ((it: string): Observable<FcmToken> => (userSession_4.auth.getSelf().pipe(mergeMap((user: User): Observable<FcmToken> => (userSession_4.fcmToken.upsert(it, new FcmToken(it, user._id)))))))(it)
            })() ?? of(undefined)))).subscribe(undefined, (it: any): void => {
                printStackTrace(it);
            }, undefined);
        }
        
        //--- Set Up xml.titleBar (overwritten on flow generation)
        
        //--- Set Up xml.backButton (overwritten on flow generation)
        onThrottledEventDo(xml.backButton, 'click', (): void => {
            this.backButtonClick();
        });
        
        //--- Set Up xml.logo
        
        //--- Set Up xml.title
        this.sessionStack.pipe(map((it: Array<ViewGenerator>): string => (((tryCastInterface<HasTitle>(takeLastOr(null, it)!, "HasTitle"))?.title ?? null) ?? Strings.app_name))).pipe(subscribeAutoDispose(xml.title, "innerText"));
        
        this.sessionStack.pipe(subscribeAutoDispose(xml.backButton, (this_: ImageButton, it: Array<ViewGenerator>): void => {
            this_.disabled = !(it.length > 1);
        }));
        
        //--- Set Up xml.settings
        showBackButton.pipe(subscribeAutoDispose(xml.backButton, viewVisible));
        showBackButton.pipe(subscribeAutoDispose(xml.backButton, reverse("disabled", not)));
        
        //--- Set Up xml.session (overwritten on flow generation)
        this.sessionStack.pipe(showInSwapCustom(xml.session, dependency, undefined));
        
        //--- Set Up xml.mainTab
        this.sessionStack.pipe(map((it: Array<ViewGenerator>): boolean => (first(it)! instanceof SettingsVG))).pipe(subscribeAutoDispose(xml.mainTab, chain("input", "checked")));
        onThrottledEventDo(xml.mainTab, 'click', (): void => {
            this.mainTabClick();
        });
        
        //--- Set Up xml.altTab
        this.sessionStack.pipe(map((it: Array<ViewGenerator>): boolean => (first(it)! instanceof SettingsVG))).pipe(subscribeAutoDispose(xml.altTab, chain("input", "checked")));
        onThrottledEventDo(xml.altTab, 'click', (): void => {
            this.altTabClick();
        });
        
        //--- Set Up xml.settingsTab
        this.sessionStack.pipe(map((it: Array<ViewGenerator>): boolean => (first(it)! instanceof SettingsVG))).pipe(subscribeAutoDispose(xml.settingsTab, chain("input", "checked")));
        onThrottledEventDo(xml.settingsTab, 'click', (): void => {
            this.settingsTabClick();
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return xml.root;
    }
    
    
    
    //--- Actions
    
    public backButtonClick(): void {
        xStackBackPressPop(this.sessionStack);
    }
    
    public mainTabClick(): void {
        xStackReset(this.sessionStack, new SettingsVG(this.root, this.session));
    }
    
    public altTabClick(): void {
        xStackReset(this.sessionStack, new SettingsVG(this.root, this.session));
    }
    
    public settingsTabClick(): void {
        xStackReset(this.sessionStack, new SettingsVG(this.root, this.session));
    }
    
    
    //--- Body End
}
