// Package: com.lightningkite.template.api
// Generated by Khrysalis - this file will be overwritten.
import { FcmToken, User } from '../../shared/models'
import { AggregateQuery, Condition, EmailPinLogin, EntryChange, GroupAggregateQuery, GroupCountQuery, ListChange, MassModification, Modification, Query, ServerHealth, UploadInformation, WebSocketIsh } from '@lightningkite/lightning-server'
import { Observable } from 'rxjs'

//! Declares com.lightningkite.template.api.Api
export interface Api {
    
    readonly auth: Api.AuthApi;
    
    readonly user: Api.UserApi;
    
    readonly fcmToken: Api.FcmTokenApi;
    
    uploadFileForRequest(): Observable<UploadInformation>
    getServerHealth(userToken: string): Observable<ServerHealth>
    
    
    
}

export namespace Api {
    //! Declares com.lightningkite.template.api.Api.AuthApi
    export interface AuthApi {
        
        refreshToken(userToken: string): Observable<string>
        getSelf(userToken: string): Observable<User>
        anonymousToken(userToken: (string | null)): Observable<string>
        emailLoginLink(input: string): Observable<void>
        emailPINLogin(input: EmailPinLogin): Observable<string>
    }
    
}
export namespace Api {
    //! Declares com.lightningkite.template.api.Api.UserApi
    export interface UserApi {
        
        _default(userToken: (string | null)): Observable<User>
        query(input: Query<User>, userToken: (string | null)): Observable<Array<User>>
        detail(id: string, userToken: (string | null)): Observable<User>
        insertBulk(input: Array<User>, userToken: (string | null)): Observable<Array<User>>
        insert(input: User, userToken: (string | null)): Observable<User>
        upsert(id: string, input: User, userToken: (string | null)): Observable<User>
        bulkReplace(input: Array<User>, userToken: (string | null)): Observable<Array<User>>
        replace(id: string, input: User, userToken: (string | null)): Observable<User>
        bulkModify(input: MassModification<User>, userToken: (string | null)): Observable<number>
        modifyWithDiff(id: string, input: Modification<User>, userToken: (string | null)): Observable<EntryChange<User>>
        modify(id: string, input: Modification<User>, userToken: (string | null)): Observable<User>
        bulkDelete(input: Condition<User>, userToken: (string | null)): Observable<number>
        _delete(id: string, userToken: (string | null)): Observable<void>
        count(input: Condition<User>, userToken: (string | null)): Observable<number>
        groupCount(input: GroupCountQuery<User>, userToken: (string | null)): Observable<Map<string, number>>
        aggregate(input: AggregateQuery<User>, userToken: (string | null)): Observable<(number | null)>
        groupAggregate(input: GroupAggregateQuery<User>, userToken: (string | null)): Observable<Map<string, (number | null)>>
        watch(userToken: (string | null)): Observable<WebSocketIsh<ListChange<User>, Query<User>>>
    }
    
}
export namespace Api {
    //! Declares com.lightningkite.template.api.Api.FcmTokenApi
    export interface FcmTokenApi {
        
        _default(userToken: string): Observable<FcmToken>
        query(input: Query<FcmToken>, userToken: string): Observable<Array<FcmToken>>
        detail(id: string, userToken: string): Observable<FcmToken>
        insertBulk(input: Array<FcmToken>, userToken: string): Observable<Array<FcmToken>>
        insert(input: FcmToken, userToken: string): Observable<FcmToken>
        upsert(id: string, input: FcmToken, userToken: string): Observable<FcmToken>
        bulkReplace(input: Array<FcmToken>, userToken: string): Observable<Array<FcmToken>>
        replace(id: string, input: FcmToken, userToken: string): Observable<FcmToken>
        bulkModify(input: MassModification<FcmToken>, userToken: string): Observable<number>
        modifyWithDiff(id: string, input: Modification<FcmToken>, userToken: string): Observable<EntryChange<FcmToken>>
        modify(id: string, input: Modification<FcmToken>, userToken: string): Observable<FcmToken>
        bulkDelete(input: Condition<FcmToken>, userToken: string): Observable<number>
        _delete(id: string, userToken: string): Observable<void>
        count(input: Condition<FcmToken>, userToken: string): Observable<number>
        groupCount(input: GroupCountQuery<FcmToken>, userToken: string): Observable<Map<string, number>>
        aggregate(input: AggregateQuery<FcmToken>, userToken: string): Observable<(number | null)>
        groupAggregate(input: GroupAggregateQuery<FcmToken>, userToken: string): Observable<Map<string, (number | null)>>
        watch(userToken: string): Observable<WebSocketIsh<ListChange<FcmToken>, Query<FcmToken>>>
    }
    
}

