// Package: com.lightningkite.template.api
// Generated by Khrysalis - this file will be overwritten.
import { FcmToken, User } from '../../shared/models'
import { Api } from './Api'
import { AggregateQuery, Condition, EmailPinLogin, EntryChange, GroupAggregateQuery, GroupCountQuery, ListChange, MassModification, Modification, Query, ServerHealth, UploadInformation, WebSocketIsh } from '@lightningkite/lightning-server'
import { Observable } from 'rxjs'

//! Declares com.lightningkite.template.api.AbstractAnonymousSession
export class AbstractAnonymousSession {
    public constructor(public readonly api: Api) {
        this.auth = new AbstractAnonymousSession.AbstractAnonymousSessionAuthApi(this.api.auth);
        this.user = new AbstractAnonymousSession.AbstractAnonymousSessionUserApi(this.api.user);
        this.fcmToken = new AbstractAnonymousSession.AbstractAnonymousSessionFcmTokenApi(this.api.fcmToken);
    }
    
    public readonly auth: AbstractAnonymousSession.AbstractAnonymousSessionAuthApi;
    public readonly user: AbstractAnonymousSession.AbstractAnonymousSessionUserApi;
    public readonly fcmToken: AbstractAnonymousSession.AbstractAnonymousSessionFcmTokenApi;
    public uploadFileForRequest(): Observable<UploadInformation> {
        return this.api.uploadFileForRequest();
    }
    
    
    
}
export namespace AbstractAnonymousSession {
    //! Declares com.lightningkite.template.api.AbstractAnonymousSession.AbstractAnonymousSessionAuthApi
    export class AbstractAnonymousSessionAuthApi {
        public constructor(public readonly api: Api.AuthApi) {
        }
        
        public anonymousToken(): Observable<string> {
            return this.api.anonymousToken(null);
        }
        public emailLoginLink(input: string): Observable<void> {
            return this.api.emailLoginLink(input);
        }
        public emailPINLogin(input: EmailPinLogin): Observable<string> {
            return this.api.emailPINLogin(input);
        }
    }
}
export namespace AbstractAnonymousSession {
    //! Declares com.lightningkite.template.api.AbstractAnonymousSession.AbstractAnonymousSessionUserApi
    export class AbstractAnonymousSessionUserApi {
        public constructor(public readonly api: Api.UserApi) {
        }
        
        public _default(): Observable<User> {
            return this.api._default(null);
        }
        public query(input: Query<User>): Observable<Array<User>> {
            return this.api.query(input, null);
        }
        public detail(id: string): Observable<User> {
            return this.api.detail(id, null);
        }
        public insertBulk(input: Array<User>): Observable<Array<User>> {
            return this.api.insertBulk(input, null);
        }
        public insert(input: User): Observable<User> {
            return this.api.insert(input, null);
        }
        public upsert(id: string, input: User): Observable<User> {
            return this.api.upsert(id, input, null);
        }
        public bulkReplace(input: Array<User>): Observable<Array<User>> {
            return this.api.bulkReplace(input, null);
        }
        public replace(id: string, input: User): Observable<User> {
            return this.api.replace(id, input, null);
        }
        public bulkModify(input: MassModification<User>): Observable<number> {
            return this.api.bulkModify(input, null);
        }
        public modifyWithDiff(id: string, input: Modification<User>): Observable<EntryChange<User>> {
            return this.api.modifyWithDiff(id, input, null);
        }
        public modify(id: string, input: Modification<User>): Observable<User> {
            return this.api.modify(id, input, null);
        }
        public bulkDelete(input: Condition<User>): Observable<number> {
            return this.api.bulkDelete(input, null);
        }
        public _delete(id: string): Observable<void> {
            return this.api._delete(id, null);
        }
        public count(input: Condition<User>): Observable<number> {
            return this.api.count(input, null);
        }
        public groupCount(input: GroupCountQuery<User>): Observable<Map<string, number>> {
            return this.api.groupCount(input, null);
        }
        public aggregate(input: AggregateQuery<User>): Observable<(number | null)> {
            return this.api.aggregate(input, null);
        }
        public groupAggregate(input: GroupAggregateQuery<User>): Observable<Map<string, (number | null)>> {
            return this.api.groupAggregate(input, null);
        }
        public watch(): Observable<WebSocketIsh<ListChange<User>, Query<User>>> {
            return this.api.watch(null);
        }
    }
}
export namespace AbstractAnonymousSession {
    //! Declares com.lightningkite.template.api.AbstractAnonymousSession.AbstractAnonymousSessionFcmTokenApi
    export class AbstractAnonymousSessionFcmTokenApi {
        public constructor(public readonly api: Api.FcmTokenApi) {
        }
        
    }
}

//! Declares com.lightningkite.template.api.AbstractUserSession
export abstract class AbstractUserSession {
    protected constructor(api: Api, userToken: string) {
        this.auth = new AbstractUserSession.UserSessionAuthApi(api.auth, userToken);
        this.user = new AbstractUserSession.UserSessionUserApi(api.user, userToken);
        this.fcmToken = new AbstractUserSession.UserSessionFcmTokenApi(api.fcmToken, userToken);
    }
    
    public abstract readonly api: Api;
    public abstract readonly userToken: string;
    public readonly auth: AbstractUserSession.UserSessionAuthApi;
    public readonly user: AbstractUserSession.UserSessionUserApi;
    public readonly fcmToken: AbstractUserSession.UserSessionFcmTokenApi;
    public uploadFileForRequest(): Observable<UploadInformation> {
        return this.api.uploadFileForRequest();
    }
    public getServerHealth(): Observable<ServerHealth> {
        return this.api.getServerHealth(this.userToken);
    }
    
    
    
}
export namespace AbstractUserSession {
    //! Declares com.lightningkite.template.api.AbstractUserSession.UserSessionAuthApi
    export class UserSessionAuthApi {
        public constructor(public readonly api: Api.AuthApi, public readonly userToken: string) {
        }
        
        public refreshToken(): Observable<string> {
            return this.api.refreshToken(this.userToken);
        }
        public getSelf(): Observable<User> {
            return this.api.getSelf(this.userToken);
        }
        public anonymousToken(): Observable<string> {
            return this.api.anonymousToken(this.userToken);
        }
        public emailLoginLink(input: string): Observable<void> {
            return this.api.emailLoginLink(input);
        }
        public emailPINLogin(input: EmailPinLogin): Observable<string> {
            return this.api.emailPINLogin(input);
        }
    }
}
export namespace AbstractUserSession {
    //! Declares com.lightningkite.template.api.AbstractUserSession.UserSessionUserApi
    export class UserSessionUserApi {
        public constructor(public readonly api: Api.UserApi, public readonly userToken: string) {
        }
        
        public _default(): Observable<User> {
            return this.api._default(this.userToken);
        }
        public query(input: Query<User>): Observable<Array<User>> {
            return this.api.query(input, this.userToken);
        }
        public detail(id: string): Observable<User> {
            return this.api.detail(id, this.userToken);
        }
        public insertBulk(input: Array<User>): Observable<Array<User>> {
            return this.api.insertBulk(input, this.userToken);
        }
        public insert(input: User): Observable<User> {
            return this.api.insert(input, this.userToken);
        }
        public upsert(id: string, input: User): Observable<User> {
            return this.api.upsert(id, input, this.userToken);
        }
        public bulkReplace(input: Array<User>): Observable<Array<User>> {
            return this.api.bulkReplace(input, this.userToken);
        }
        public replace(id: string, input: User): Observable<User> {
            return this.api.replace(id, input, this.userToken);
        }
        public bulkModify(input: MassModification<User>): Observable<number> {
            return this.api.bulkModify(input, this.userToken);
        }
        public modifyWithDiff(id: string, input: Modification<User>): Observable<EntryChange<User>> {
            return this.api.modifyWithDiff(id, input, this.userToken);
        }
        public modify(id: string, input: Modification<User>): Observable<User> {
            return this.api.modify(id, input, this.userToken);
        }
        public bulkDelete(input: Condition<User>): Observable<number> {
            return this.api.bulkDelete(input, this.userToken);
        }
        public _delete(id: string): Observable<void> {
            return this.api._delete(id, this.userToken);
        }
        public count(input: Condition<User>): Observable<number> {
            return this.api.count(input, this.userToken);
        }
        public groupCount(input: GroupCountQuery<User>): Observable<Map<string, number>> {
            return this.api.groupCount(input, this.userToken);
        }
        public aggregate(input: AggregateQuery<User>): Observable<(number | null)> {
            return this.api.aggregate(input, this.userToken);
        }
        public groupAggregate(input: GroupAggregateQuery<User>): Observable<Map<string, (number | null)>> {
            return this.api.groupAggregate(input, this.userToken);
        }
        public watch(): Observable<WebSocketIsh<ListChange<User>, Query<User>>> {
            return this.api.watch(this.userToken);
        }
    }
}
export namespace AbstractUserSession {
    //! Declares com.lightningkite.template.api.AbstractUserSession.UserSessionFcmTokenApi
    export class UserSessionFcmTokenApi {
        public constructor(public readonly api: Api.FcmTokenApi, public readonly userToken: string) {
        }
        
        public _default(): Observable<FcmToken> {
            return this.api._default(this.userToken);
        }
        public query(input: Query<FcmToken>): Observable<Array<FcmToken>> {
            return this.api.query(input, this.userToken);
        }
        public detail(id: string): Observable<FcmToken> {
            return this.api.detail(id, this.userToken);
        }
        public insertBulk(input: Array<FcmToken>): Observable<Array<FcmToken>> {
            return this.api.insertBulk(input, this.userToken);
        }
        public insert(input: FcmToken): Observable<FcmToken> {
            return this.api.insert(input, this.userToken);
        }
        public upsert(id: string, input: FcmToken): Observable<FcmToken> {
            return this.api.upsert(id, input, this.userToken);
        }
        public bulkReplace(input: Array<FcmToken>): Observable<Array<FcmToken>> {
            return this.api.bulkReplace(input, this.userToken);
        }
        public replace(id: string, input: FcmToken): Observable<FcmToken> {
            return this.api.replace(id, input, this.userToken);
        }
        public bulkModify(input: MassModification<FcmToken>): Observable<number> {
            return this.api.bulkModify(input, this.userToken);
        }
        public modifyWithDiff(id: string, input: Modification<FcmToken>): Observable<EntryChange<FcmToken>> {
            return this.api.modifyWithDiff(id, input, this.userToken);
        }
        public modify(id: string, input: Modification<FcmToken>): Observable<FcmToken> {
            return this.api.modify(id, input, this.userToken);
        }
        public bulkDelete(input: Condition<FcmToken>): Observable<number> {
            return this.api.bulkDelete(input, this.userToken);
        }
        public _delete(id: string): Observable<void> {
            return this.api._delete(id, this.userToken);
        }
        public count(input: Condition<FcmToken>): Observable<number> {
            return this.api.count(input, this.userToken);
        }
        public groupCount(input: GroupCountQuery<FcmToken>): Observable<Map<string, number>> {
            return this.api.groupCount(input, this.userToken);
        }
        public aggregate(input: AggregateQuery<FcmToken>): Observable<(number | null)> {
            return this.api.aggregate(input, this.userToken);
        }
        public groupAggregate(input: GroupAggregateQuery<FcmToken>): Observable<Map<string, (number | null)>> {
            return this.api.groupAggregate(input, this.userToken);
        }
        public watch(): Observable<WebSocketIsh<ListChange<FcmToken>, Query<FcmToken>>> {
            return this.api.watch(this.userToken);
        }
    }
}

